package ru.mosit.pahotest;

import ru.mosit.pahotest.data.JsonData;
import ru.mosit.pahotest.data.XmlData;
import ru.mosit.pahotest.parser.JsonParser;
import ru.mosit.pahotest.parser.XmlParser;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Scanner;

public class DataParser {
    private final JsonParser jsonParser;
    private final XmlParser xmlParser;
    private final Scanner scanner;
    
    public DataParser() throws Exception {
        this.jsonParser = new JsonParser();
        this.xmlParser = new XmlParser();
        this.scanner = new Scanner(System.in);
    }
    
    public static void main(String[] args) {
        try {
            DataParser parser = new DataParser();
            parser.run();
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    public void run() {
        printWelcomeMessage();
        
        while (true) {
            printMenu();
            int choice = getMenuChoice();
            
            switch (choice) {
                case 1 -> parseJsonFile();
                case 2 -> parseXmlFile();
                case 3 -> parseBothFiles();
                case 4 -> showFileInfo();
                case 5 -> {
                    System.out.println("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                    return;
                }
                default -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
            
            System.out.println("\n" + "=".repeat(60));
            System.out.println("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
            scanner.nextLine();
        }
    }
    
    private void printWelcomeMessage() {
        System.out.println("üéØ " + "=".repeat(58) + " üéØ");
        System.out.println("‚îÇ" + " ".repeat(20) + "–ü–ê–†–°–ï–† –î–ê–ù–ù–´–• MQTT" + " ".repeat(20) + "‚îÇ");
        System.out.println("‚îÇ" + " ".repeat(15) + "JSON –∏ XML —Ñ–æ—Ä–º–∞—Ç" + " ".repeat(15) + "‚îÇ");
        System.out.println("üéØ " + "=".repeat(58) + " üéØ");
        System.out.println();
    }
    
    private void printMenu() {
        System.out.println("üìã –ú–ï–ù–Æ:");
        System.out.println("1Ô∏è‚É£  –ü–∞—Ä—Å–∏—Ç—å JSON —Ñ–∞–π–ª (data.json)");
        System.out.println("2Ô∏è‚É£  –ü–∞—Ä—Å–∏—Ç—å XML —Ñ–∞–π–ª (data.xml)");
        System.out.println("3Ô∏è‚É£  –ü–∞—Ä—Å–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞");
        System.out.println("4Ô∏è‚É£  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö");
        System.out.println("5Ô∏è‚É£  –í—ã—Ö–æ–¥");
        System.out.print("üëâ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-5): ");
    }
    
    private int getMenuChoice() {
        try {
            return Integer.parseInt(scanner.nextLine().trim());
        } catch (NumberFormatException e) {
            return -1;
        }
    }
    
    private void parseJsonFile() {
        System.out.println("\nüîç –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ñ–∞–π–ª–∞...");
        try {
            if (!fileExists("data.json")) {
                System.out.println("‚ùå –§–∞–π–ª data.json –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            List<JsonData> data = jsonParser.parseJsonFile("data.json");
            jsonParser.printJsonData(data);
            
        } catch (IOException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }
    
    private void parseXmlFile() {
        System.out.println("\nüîç –ü–∞—Ä—Å–∏–Ω–≥ XML —Ñ–∞–π–ª–∞...");
        try {
            if (!fileExists("data.xml")) {
                System.out.println("‚ùå –§–∞–π–ª data.xml –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }
            
            List<XmlData> data = xmlParser.parseXmlFile("data.xml");
            xmlParser.printXmlData(data);
            
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è XML —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }
    
    private void parseBothFiles() {
        System.out.println("\nüîç –ü–∞—Ä—Å–∏–Ω–≥ –æ–±–æ–∏—Ö —Ñ–∞–π–ª–æ–≤...");
        
        // –ü–∞—Ä—Å–∏–º JSON
        parseJsonFile();
        System.out.println("\n" + "‚îÄ".repeat(60));
        
        // –ü–∞—Ä—Å–∏–º XML
        parseXmlFile();
    }
    
    private void showFileInfo() {
        System.out.println("\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ê–•:");
        System.out.println("‚îå" + "‚îÄ".repeat(50) + "‚îê");
        
        checkFileInfo("data.json", "JSON –¥–∞–Ω–Ω—ã–µ");
        checkFileInfo("data.xml", "XML –¥–∞–Ω–Ω—ã–µ");
        
        System.out.println("‚îî" + "‚îÄ".repeat(50) + "‚îò");
    }
    
    private void checkFileInfo(String filename, String description) {
        File file = new File(filename);
        if (file.exists()) {
            try {
                long size = Files.size(Paths.get(filename));
                String lastModified = LocalDateTime.ofInstant(
                    java.time.Instant.ofEpochMilli(file.lastModified()),
                    java.time.ZoneId.systemDefault()
                ).format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"));
                
                System.out.printf("‚îÇ ‚úÖ %-15s ‚îÇ %-8s ‚îÇ %s ‚îÇ%n", 
                    description, 
                    formatFileSize(size),
                    lastModified);
            } catch (IOException e) {
                System.out.printf("‚îÇ ‚ùå %-15s ‚îÇ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚îÇ%n", description);
            }
        } else {
            System.out.printf("‚îÇ ‚ùå %-15s ‚îÇ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚îÇ%n", description);
        }
    }
    
    private String formatFileSize(long bytes) {
        if (bytes < 1024) return bytes + " B";
        if (bytes < 1024 * 1024) return String.format("%.1f KB", bytes / 1024.0);
        return String.format("%.1f MB", bytes / (1024.0 * 1024.0));
    }
    
    private boolean fileExists(String filename) {
        return new File(filename).exists();
    }
}
